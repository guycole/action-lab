name: action-lab
 
on:
  push:
    # automagically run for push to main
    branches:
      - main

  workflow_dispatch:
    inputs:
      deployment:
        default: development
        description: 'deployment environment'
        required: true
        type: choice
        options:
        - development
        - production
      release:
        default: '1.0.0'
        description: 'release version'
        required: true

env:
  AWS_REGION: us-west-2
  CLUSTER_NAME: cluster-name
  ERROR_FLAG: ${{ false }}
  TAG: ${{ github.run_number }}

jobs:
  docker:
    # always build and package
    runs-on: ubuntu-latest

    steps:
      - name: repo checkout
        uses: actions/checkout@v3

      - name: ghcr login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: build and push
        uses: docker/build-push-action@v3
        with:
          context: app
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/guycole/action-lab:latest
            ghcr.io/guycole/action-lab:${{ env.TAG }}

# success() always() cancelled() failure()

  deploy:
    runs-on: ubuntu-latest
    needs: [docker]

    permissions:
      id-token: write
      contents: read
  
    steps:
      - name: repo checkout
        uses: actions/checkout@v3

      - run: legal prod push
        if: ${{ failure() }}
        echo ${{ "failure test" }}

#        if: github.event_name == "push" && github.ref == "refs/heads/main"      
#        if: github.repository == 'octo-org/octo-repo-prod'
#        must be on main

#      - if [[ "${{ github.event.inputs.deployment }}" == "" ]]; then
#          echo "TEST_FLAG=empty" >> $GITHUB_OUTPUT;
#        fi;

#      - run: echo ${{ GITHUB_OUTPUT }}

      - run: echo ${{ github.event.inputs.deployment }}

      - run: echo "${{ github.event_name }} ${{ github.ref }} $(git branch --show-current)"
        # push workflow_dispatch
        # refs/heads/main ref/heads/branch2
        # main branch2

          # 
#    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

#      - name: runner preparation
#        run: |
#          sudo apt update -y 
#          sudo apt install jq awscli -y
#

#      - name: assume oidc role
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-region: ${{ env.AWS_REGION }}
#          role-duration-seconds: 1200
#          role-session-name: ${{ github.run_number}}-role
#          role-to-assume: arn:aws:iam::157:role/github_oidc_role
#
#      - name: oidc diagnostic
#        run: aws sts get-caller-identity

#      - name: assume aws eks role
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.AWS_REGION }}
#          role-duration-seconds: 1200
#          role-session-name: ${{ github.run_number}}-role
#          role-to-assume: arn:aws:iam::157:role/github_action_role

# helm install turtle funny-turtle/ --values funny-turtle/values.yaml -n turtle

#      - name: kubeconfing
#        run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

#      - name: helm deploy
#        uses: bitovi/github-actions-deploy-eks-helm@v1.1.0
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.AWS_REGION }}
#          cluster-name: ${{ env.CLUSTER_NAME }}
#          cluster-role-arn: arn:aws:iam::157:role/github_action_role
#          config-files: helm/funny-turtle/values.yaml
#          chart-path: helm/funny-turtle
#          name: turtle
#          namespace: turtle
